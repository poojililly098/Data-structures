#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct Stack {
    int *data;
    int top;
    int capacity;
} Stack;

typedef struct MyQueue {
    Stack *stack1;
    Stack *stack2;
} MyQueue;

Stack* createStack(int capacity) {
    Stack *stack = (Stack *)malloc(sizeof(Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->data = (int *)malloc(stack->capacity * sizeof(int));
    return stack;
}

void push(Stack *stack, int x) {
    if (stack->top == stack->capacity - 1) return;
    stack->data[++stack->top] = x;
}

int pop(Stack *stack) {
    if (stack->top == -1) return -1;
    return stack->data[stack->top--];
}

bool isEmpty(Stack *stack) {
    return stack->top == -1;
}

MyQueue* myQueueCreate() {
    MyQueue *queue = (MyQueue *)malloc(sizeof(MyQueue));
    queue->stack1 = createStack(100);
    queue->stack2 = createStack(100);
    return queue;
}

void myQueuePush(MyQueue* obj, int x) {
    push(obj->stack1, x);
}

int myQueuePop(MyQueue* obj) {
    if (isEmpty(obj->stack2)) {
        while (!isEmpty(obj->stack1)) {
            push(obj->stack2, pop(obj->stack1));
        }
    }
    return pop(obj->stack2);
}

int myQueuePeek(MyQueue* obj) {
    if (isEmpty(obj->stack2)) {
        while (!isEmpty(obj->stack1)) {
            push(obj->stack2, pop(obj->stack1));
        }
    }
    return obj->stack2->data[obj->stack2->top];
}

bool myQueueEmpty(MyQueue* obj) {
    return isEmpty(obj->stack1) && isEmpty(obj->stack2);
}

void myQueueFree(MyQueue* obj) {
    free(obj->stack1->data);
    free(obj->stack1);
    free(obj->stack2->data);
    free(obj->stack2);
    free(obj);
}
