#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* insertNth(struct ListNode* head, int p, int n) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = n;
    newNode->next = NULL;

    if (p == 0) {
        newNode->next = head;
        return newNode;
    }

    struct ListNode* current = head;
    for (int i = 0; i < p - 1 && current != NULL; i++) {
        current = current->next;
    }

    if (current != NULL) {
        newNode->next = current->next;
        current->next = newNode;
    } else {
        free(newNode);
    }

    return head;
}

void printList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf("%d ", current->val);
        current = current->next;
    }
    printf("\n");
}

int main() {
    struct ListNode* head1 = (struct ListNode*)malloc(sizeof(struct ListNode));
    head1->val = 1;
    head1->next = (struct ListNode*)malloc(sizeof(struct ListNode));
    head1->next->val = 3;
    head1->next->next = (struct ListNode*)malloc(sizeof(struct ListNode));
    head1->next->next->val = 2;
    head1->next->next->next = (struct ListNode*)malloc(sizeof(struct ListNode));
    head1->next->next->next->val = 3;
    head1->next->next->next->next = (struct ListNode*)malloc(sizeof(struct ListNode));
    head1->next->next->next->next->val = 4;
    head1->next->next->next->next->next = (struct ListNode*)malloc(sizeof(struct ListNode));
    head1->next->next->next->next->next->val = 5;
    head1->next->next->next->next->next->next = NULL;

    head1 = insertNth(head1, 3, 2);
    printList(head1);

    struct ListNode* head2 = (struct ListNode*)malloc(sizeof(struct ListNode));
    head2->val = 1;
    head2->next = NULL;

    head2 = insertNth(head2, 0, 0);
    printList(head2);

    struct ListNode* head3 = (struct ListNode*)malloc(sizeof(struct ListNode));
    head3->val = 1;
    head3->next = (struct ListNode*)malloc(sizeof(struct ListNode));
    head3->next->val = 2;
    head3->next->next = NULL;

    head3 = insertNth(head3, 3, 3);
    printList(head3);

    return 0;
}
output:
1 3 2 2 3 4 5 
0 1 
1 2
