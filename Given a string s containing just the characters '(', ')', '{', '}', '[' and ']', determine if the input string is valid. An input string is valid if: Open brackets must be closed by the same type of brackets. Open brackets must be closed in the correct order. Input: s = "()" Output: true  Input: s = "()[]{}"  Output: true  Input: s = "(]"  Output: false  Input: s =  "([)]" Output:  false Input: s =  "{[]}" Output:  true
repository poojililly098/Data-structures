#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 100

typedef struct {
    char items[MAX];
    int top;
} Stack;

void initStack(Stack* s) {
    s->top = -1;
}

bool isFull(Stack* s) {
    return s->top == MAX - 1;
}

bool isEmpty(Stack* s) {
    return s->top == -1;
}

void push(Stack* s, char item) {
    if (!isFull(s)) {
        s->items[++(s->top)] = item;
    }
}

char pop(Stack* s) {
    if (!isEmpty(s)) {
        return s->items[(s->top)--];
    }
    return '\0';
}

bool isValid(char* s) {
    Stack stack;
    initStack(&stack);
    for (int i = 0; s[i] != '\0'; i++) {
        char current = s[i];
        if (current == '(' || current == '{' || current == '[') {
            push(&stack, current);
        } else {
            if (isEmpty(&stack)) return false;
            char top = pop(&stack);
            if ((current == ')' && top != '(') || 
                (current == '}' && top != '{') || 
                (current == ']' && top != '[')) {
                return false;
            }
        }
    }
    return isEmpty(&stack);
}

int main() {
    char* test1 = "()";
    char* test2 = "()[]{}";
    char* test3 = "(]";
    char* test4 = "([)]";
    char* test5 = "{[]}";

    printf("%s: %s\n", test1, isValid(test1) ? "true" : "false");
    printf("%s: %s\n", test2, isValid(test2) ? "true" : "false");
    printf("%s: %s\n", test3, isValid(test3) ? "true" : "false");
    printf("%s: %s\n", test4, isValid(test4) ? "true" : "false");
    printf("%s: %s\n", test5, isValid(test5) ? "true" : "false");

    return 0;
}
output:
():true
()[]{}: true
(]: false
([)]: false
{[]}: true
