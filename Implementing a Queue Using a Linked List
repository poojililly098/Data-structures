#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


struct Queue {
    struct Node* front;
    struct Node* rear;
};


struct Node* newNode(int data) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = data;
    temp->next = NULL;
    return temp;
}


struct Queue* createQueue() {
    struct Queue* q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = q->rear = NULL;
    return q;
}


void enqueue(struct Queue* q, int data) {
    struct Node* temp = newNode(data);
    if (q->rear == NULL) {
        q->front = q->rear = temp;
        return;
    }
    q->rear->next = temp;
    q->rear = temp;
}


int dequeue(struct Queue* q) {
    if (q->front == NULL) {
        return -1; // Queue is empty
    }
    struct Node* temp = q->front;
    int data = temp->data;
    q->front = q->front->next;
    if (q->front == NULL) {
        q->rear = NULL;
    }
    free(temp);
    return data;
}


int isEmpty(struct Queue* q) {
    return q->front == NULL;
}


int front(struct Queue* q) {
    if (isEmpty(q)) {
        return -1; // Queue is empty
    }
    return q->front->data;
}


int rear(struct Queue* q) {
    if (isEmpty(q)) {
        return -1; // Queue is empty
    }
    return q->rear->data;
}
int main() {
    struct Queue* q = createQueue();
    enqueue(q, 10);
    enqueue(q, 20);
    enqueue(q, 30);
    
    printf("Dequeued: %d\n", dequeue(q));
    printf("Front item: %d\n", front(q));
    printf("Rear item: %d\n", rear(q));
    
    return 0;
}
output:
Dequeued: 10
Front item: 20
Rear item: 30


=== Code Execution Successful ===
